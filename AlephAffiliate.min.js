/* tslint:disable */
/* eslint-disable */
const referralQueryString = "a", allURLParams = () => { let e = window.location.search; if ("" === e) { const o = window.location.hash; "" !== o && -1 !== o.indexOf("?") && (debug && console.log("Found affiliate in hashed URL"), e = o.substring(o.indexOf("?"))) } return console.log("queryString :", e), new URLSearchParams(e) }, hasURLParam = e => { const o = allURLParams().has(e); return console.log(`paramName ${e} is set :`, o), o }, getURLParam = e => { const o = allURLParams().get(e); return console.log(`paramName ${e} value :`, o), o }, Cookie = { get: e => { let o = document.cookie.match(`(?:(?:^|.*; *)${e} *= *([^;]*).*$)|^.*$`)[1]; if (o) return decodeURIComponent(o) }, set: (e, o, r = {}) => (r.days && (r["max-age"] = 60 * r.days * 60 * 24, delete r.days), r = Object.entries(r).reduce((e, [o, r]) => `${e}; ${o}=${r}`, ""), document.cookie = e + "=" + encodeURIComponent(o) + r, !0), delete: (e, o) => { Cookie.set(e, "", { "max-age": -1, ...o }) }, setJSON: (e, o, r) => Cookie.set(e, JSON.stringify(o), r), getJSON: e => JSON.parse(Cookie.get(e)) }, debug = !0, CD = (e, o) => { if ("object" != typeof e) throw new Error("DV: does not work for individual vars, instead pass them like {a:a}."); void 0 === o && (o = CL); for (const o in e) { let r = `(${typeof e[o]}):`; "object" == typeof e[o] && (r += "\n"), Array.isArray(e[o]) && (r = `(array ${e[o].length}):\n`), console.log(` - ${o} ${r}`, e[o]) } }, cookieName = "affiliation", CL = console.log, CE = console.error, CW = console.warn, saveAffiliator = (e, o) => { console.log("saveAffiliator"), CD({ affiliatorAddress: e }), StoreValue(o, e) }, loadAffiliator = e => (debug && console.log("loadAffiliator"), String(LoadStoredValue(e))), StoreValue = (e, o) => { let r = !1; try { window.localStorage.setItem(e, o), debug && console.log("\n***** Success saving to LocalStorage"), r = !0 } catch (r) { console.log("\n***** Error saving to LocalStorage:"), CD({ key: e }), CD({ value: o }), console.log(r) } try { (r = Cookie.setJSON(cookieName, { [e]: o }, { path: "/", days: 364 })) && debug && console.log("\n***** Success saving to cookie") } catch (r) { console.log("\n***** Error saving to cookie:"), CD({ key: e }), CD({ value: o }), console.log(r) } if (!r) throw new Error("All means of saving key failed"); return r }, LoadStoredValue = e => { let o = null; try { if (o = window.localStorage.getItem(e)) { if (debug && console.log("\n***** LocalStorage found value for:"), debug && CD({ key: e }), debug && CD({ value: o }), !debug) return o } else console.log("\n***** LocalStorage value empty for"), CD({ key: e }) } catch (o) { console.log("\n***** Error reading LocalStorage:"), CD({ key: e }), console.log(o) } try { const r = Cookie.getJSON(cookieName); if (r[e]) { if (o = r[e], debug && console.log("\n***** Cookie found value for:"), debug && CD({ key: e }), debug && CD({ value: o }), !debug) return o } else console.log("\n***** Cookie value empty for"), CD({ key: e }) } catch (o) { console.warn("\n***** Error reading Cookie:"), CD({ key: e }), console.log(o) } return o }, isValidETHAddress = e => "string" == typeof e && "" !== e && !!e.match(/^0x[a-fA-F0-9]{40}$/), reverseString = e => e.split("").reverse().join(""), transformAddressBackFromParam = e => { return "0x" + reverseString(e) }, paramToAddress = e => e.startsWith("0x") && isValidETHAddress(e) ? e : transformAddressBackFromParam(e); function getAffiliatorAddress() { const e = hasURLParam(referralQueryString); debug && CD({ hasParam: e }); const o = getURLParam(referralQueryString); CD({ urlAffiliator: o }); const r = { urlAddress: "", urlValid: !1, storedAddress: "", storedValid: !1 }; if (e && o) { const e = paramToAddress(o); CD({ urlAddress: e }), r.urlAddress = e, isValidETHAddress(e) ? (r.urlValid = !0, saveAffiliator(e, tokenAddress)) : CE("URL param from affiliator but address was not valid") } try { r.storedAddress = loadAffiliator(tokenAddress), r.storedAddress && (r.storedValid = isValidETHAddress(r.storedAddress)) } catch (e) { CW(e) } return r } function urlToOrigin(e) { return new URL(e).origin } function getAndTransferAffiliate(e) { console.log("Setting up affiliate at ", window.location.href), postMessage(e, getAffiliatorAddress()) } function postMessage(e, o) { console.log(`Posting message to iframe ${e}`); const r = document.getElementById(e); if (!r) throw new Error(`No Iframe found with Id: ${e}`); { const e = r.src; o.actor = AlephIframeId, r.contentWindow.postMessage(o, urlToOrigin(e)) } } function receiveMessage(e) { e.data && e.data.actor == IframeId && (CL("Window received message with actor == " + IframeId), CD({ "event.data": e.data }), e.data.affiliatorToStore && saveAffiliator(urlAddress, tokenAddress)) } let IframeSearches = 0; function prepareActionsOnIframeLoad(e) { CL("window.onload"); const o = document.getElementById(e); if (!o) { if (IframeSearches++, console.log("IframeSearches = ", IframeSearches), IframeSearches < 30) return void window.setTimeout(function () { prepareActionsOnIframeLoad(e) }, 150); throw new Error(`No Iframe found with Id: ${e}`) } CL("Detected Iframe"), o.addEventListener("load", function () { console.log("Detecteded Iframe load"), getAndTransferAffiliate(e) }), window.attachEvent && window.attachEvent("onmessage", receiveMessageBack), window.addEventListener("message", receiveMessageBack) } let tokenAddress = "AlephAffiliator"; const AlephIframeId = "AlephIframe"; let IframeLoadChecks = 0; function isIframeFullyLoaded(e, o) { const r = document.getElementById(e); let a, t = !1; try { a = r.contentDocument || r.contentWindow.document } catch { t = !0 } if (t || "complete" == a.readyState) return r.contentWindow.onload = function () { console.log("I am loaded") }, void o(); ++IframeLoadChecks < 100 && window.setTimeout(function () { isIframeFullyLoaded(e, o) }, 150) } window.onload = prepareActionsOnIframeLoad(AlephIframeId);